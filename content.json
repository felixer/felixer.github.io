{"meta":{"title":"算法、数据、生活","subtitle":"学习总结 思考感悟","description":"学习总结 思考感悟","author":"Liu Lin","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-01-28T08:33:21.000Z","updated":"2018-01-28T08:33:44.000Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-01-28T08:29:11.000Z","updated":"2018-01-28T08:31:54.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-01-28T08:32:35.000Z","updated":"2018-01-28T08:32:51.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"mlbeginer_01_线性回归","slug":"mlbeginer-01-线性回归","date":"2018-03-09T02:09:54.000Z","updated":"2018-03-09T02:57:04.000Z","comments":true,"path":"2018/03/09/mlbeginer-01-线性回归/","link":"","permalink":"http://yoursite.com/2018/03/09/mlbeginer-01-线性回归/","excerpt":"","text":"线性回归机器学习(Machine Learning, ML)是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。 线性回归应该是机器学习中最简单的模型了，常包含一元线性回归、多元线性回归、多项式线性回归等方法。本文以生活中一个比较贴近的例子，带领大家了解线性回归。 一元线性回归一元线性回归只有一个自变量，一个因变量,其数学核心表达式为$ y = b_0 + b_1*x_1 $，其中x为自变量，y为因变量。$b_0$为y轴的截距，代表当x=0时y的值。$b_1$为斜率，它所代表的数学含义是自变量单位距离的变化所影响的因变量的变化 在进行机器学习前，我们首先需要做数据准备。比如有100条数据，我们首先要对这些数据进行分类，一部分作为构建模型用，称为训练集；一部分用来检测我们的结果是否正确，称为训练集。训练集和测试集的比率通常为8-2，7-3。 工作年限和薪水的问题 如图所示，我们的x轴代表了工作的年限，y轴代表了薪水，通过散点图可以看出x和y确实存在某种线性关系。因此我们就可以使用一元线性回归来解决我们的这个问题，那我们要做什么呢？就是要通过这些数据构建出红色的那条线，这就是机器学习的模型。有了这个模型之后，比如新来一个员工，我们就可以使用这个模型来预测该员工再某工作年限所得得薪水是多少。 知道了我们要做的事以后，我们所面对的第一个问题就是如何构建这条红色线段，通常会使用到数学中的最小二乘法，本文不对最小二乘法的数学定义讨论，幸运的是通过使用python机器学习的库，我们可以直接调用线性回归的相关函数。 下面是具体的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243# 第一步 导入标准的库函数import numpy as npimport matplotlib.pyplot as pltimport pandas as pd# 第二步 构建数据集dataset = pd.read_csv(&apos;Salary_Data.csv&apos;) #从文件中读取数据到dataset变量中X = dataset.iloc[:,:-1].values #设置自变量Y = dataset.iloc[:,1].values #设定因变量# 第三步 将数据分割成训练集和测试集from sklearn.model_selection import train_test_split X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=1/3,random_state=0) #生成训练集和测试集# 第四步 拟合线性回归模型from sklearn.linear_model import LinearRegression #从python机器学习的库中导入线性回归函数regressor = LinearRegression()regressor.fit(X_train,Y_train) #用训练集中的数据，拟合模型# 第五步 预测y_pred = regressor.predict(X_test) #根据测试机通过模型进行预测# 第六步 画图-训练集plt.scatter(X_train,Y_train,color=&apos;red&apos;) #用测试集画点plt.plot(X_train,regressor.predict(X_train),color=&apos;blue&apos;) #用测试集画线plt.title(&apos;Salary VS Experience (traing set)&apos;) #设置标题plt.xlabel(&apos;Years of Experience&apos;) #设置X坐标plt.ylabel(&apos;Salary&apos;) #设置Y坐标plt.show() #图表展示# 画图 -测试集合plt.scatter(X_test,Y_test,color=&apos;red&apos;) #用训练集画点plt.plot(X_train,regressor.predict(X_train),color=&apos;blue&apos;) #模型plt.title(&apos;Salary VS Experience (test set)&apos;) plt.xlabel(&apos;Years of Experience&apos;)plt.ylabel(&apos;Salary&apos;)plt.show() 上图是根据训练集拟合出来的一元线性回归方程 上图是根据测试集对拟合出来的一元线性回归方程进行预测，可以看出在一定程度上还是比较准确的。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"},{"name":"beginner","slug":"机器学习/beginner","permalink":"http://yoursite.com/categories/机器学习/beginner/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"机器学习_05_线性回归","slug":"机器学习-05-线性回归","date":"2018-03-09T00:32:53.000Z","updated":"2018-03-09T02:10:30.000Z","comments":true,"path":"2018/03/09/机器学习-05-线性回归/","link":"","permalink":"http://yoursite.com/2018/03/09/机器学习-05-线性回归/","excerpt":"","text":"线性回归一元线性回归比较简单，只有一个因变量,其数学核心表达式为$ y = b_0 + b_1*x_1 $,计算过程通常使用最小二乘法，计算平方和","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"},{"name":"tutorial","slug":"机器学习/tutorial","permalink":"http://yoursite.com/categories/机器学习/tutorial/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"机器学习_04_训练集和测试集","slug":"机器学习-04-训练集和测试集","date":"2018-03-08T02:25:49.000Z","updated":"2018-03-09T00:32:56.000Z","comments":true,"path":"2018/03/08/机器学习-04-训练集和测试集/","link":"","permalink":"http://yoursite.com/2018/03/08/机器学习-04-训练集和测试集/","excerpt":"训练集和测试集机器学习是通过已有的数据建立模型，然后再通过新的数据不断修正模型的一个过程。 训练集：进行建模训练 测试集：测试最后的结果 拟合的含义：拟合代表通过已有数据拟合模型的过程 过渡拟合：拟合好的模型对于训练集效果较好，但是对于测试集效果不好 欠拟合：….","text":"训练集和测试集机器学习是通过已有的数据建立模型，然后再通过新的数据不断修正模型的一个过程。 训练集：进行建模训练 测试集：测试最后的结果 拟合的含义：拟合代表通过已有数据拟合模型的过程 过渡拟合：拟合好的模型对于训练集效果较好，但是对于测试集效果不好 欠拟合：…. 特征缩放欧氏距离，两个点之间的集合距离。在数据集中，需要对某些数据做特征缩放，避免某些值太大过渡的影响。 常用两种方法： 标准化： x-mean(x)/标准方差 (标准方差用来衡量浮动性，平均值为0，方差为1的分布) 正常化： x-min(x)/max(x)-min(x)（将原数据投射到0-1之间）","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"},{"name":"tutorial","slug":"机器学习/tutorial","permalink":"http://yoursite.com/categories/机器学习/tutorial/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"p-03-列表","slug":"p-03-列表","date":"2018-03-08T01:31:21.000Z","updated":"2018-03-08T01:39:55.000Z","comments":true,"path":"2018/03/08/p-03-列表/","link":"","permalink":"http://yoursite.com/2018/03/08/p-03-列表/","excerpt":"列表列表是一种非常简单的数组。他们可以包含任意的类型的变量，包含任意多个变量。同时列表的遍历是非常简单的。 1234567891011mylist = []mylist.append(1)mylist.append(2)mylist.append(3)print(mylist[0]) # prints 1print(mylist[1]) # prints 2print(mylist[2]) # prints 3# prints out 1,2,3for x in mylist: print(x)","text":"列表列表是一种非常简单的数组。他们可以包含任意的类型的变量，包含任意多个变量。同时列表的遍历是非常简单的。 1234567891011mylist = []mylist.append(1)mylist.append(2)mylist.append(3)print(mylist[0]) # prints 1print(mylist[1]) # prints 2print(mylist[2]) # prints 3# prints out 1,2,3for x in mylist: print(x) 如果你视图访问一个不存在的列表，将会报错而不是异常 12mylist = [1,2,3]print(mylist[10]) 联系1234567891011121314151617181920numbers = []strings = []names = [&quot;John&quot;, &quot;Eric&quot;, &quot;Jessica&quot;]# write your code heresecond_name = names[1]for i in range(1,4): numbers.append(i)for s in [&quot;hello&quot;,&quot;world&quot;]: strings.append(s)# this code should write out the filled arrays and the second name in the names list (Eric).print(numbers)print(strings)print(&quot;The second name on the names list is %s&quot; % second_name)","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"tutorial","slug":"python/tutorial","permalink":"http://yoursite.com/categories/python/tutorial/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"机器学习_03_数据预处理","slug":"机器学习-03-数据预处理","date":"2018-03-07T12:57:17.000Z","updated":"2018-03-08T02:26:08.000Z","comments":true,"path":"2018/03/07/机器学习-03-数据预处理/","link":"","permalink":"http://yoursite.com/2018/03/07/机器学习-03-数据预处理/","excerpt":"数据预处理下载数据集导入标准库我们首先导入常用的标准库，最为常用的有三个,numpy包含了许多数学方法。matplotlib是用来画图的。pandas是用来处理数据集的 123import numpy as npimport matplotlib.pyplot as pltimport pandas as pd 运行代码块","text":"数据预处理下载数据集导入标准库我们首先导入常用的标准库，最为常用的有三个,numpy包含了许多数学方法。matplotlib是用来画图的。pandas是用来处理数据集的 123import numpy as npimport matplotlib.pyplot as pltimport pandas as pd 运行代码块 导入数据集导入数据集首先要设置工作目录： 可以通过file explorer设置工作目录 将程序文件另存为数据文件目录 机器学习中很重要的一件事，就是创建自变量的矩阵和因变量的向量 123456#导入数据集dataset = pd.read_csv(&apos;Data.csv&apos;)#创建自变量的矩阵，iloc表示取某些行列，第一个参数表示行数，第二个参数表示列数X = dataset.iloc[:,:-1].values#创建因变量的向量Y = dataset.iloc[:,3].values 缺失数据确实数据表示数据是不完整的，有一部分数据是缺失的 删除缺失数据 列平均值替代法 中位数 最长出现 等等 1234567# Taking care of missing datafrom sklearn.preprocessing import Imputerimputer = Imputer(missing_values=&quot;NaN&quot;, strategy=&quot;mean&quot;, axis=0)imputer = imputer.fit(X[:,1:3])X[:,1:3] = imputer.transform(X[:,1:3]) 分类数据原有数据可能是包含一定的含义的，比如美国、法国、中国，但我们在机器学习中要将这种类别进行数字化，如果只是普通的数字化可能造成顺序问题，这里可以使用虚拟编码技术，如果有3类，美国就变成了100，法国就编程了010，中国就编程了001 12345678910# Encoding categorical datafrom sklearn.preprocessing import LabelEncoder,OneHotEncoderlabelEncoder_X = LabelEncoder()X[:,0] = labelEncoder_X.fit_transform(X[:,0])onehotencoder = OneHotEncoder(categorical_features = [0])X = onehotencoder.fit_transform(X).toarray()labelEncoder_y = LabelEncoder()Y = labelEncoder_y.fit_transform(Y) 将数据分成训练集和测试集特征缩放数据预处理模板","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"},{"name":"tutorial","slug":"机器学习/tutorial","permalink":"http://yoursite.com/categories/机器学习/tutorial/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"机器学习_02_安装开发环境","slug":"机器学习-02-安装Python和Anaconda","date":"2018-03-07T11:37:20.000Z","updated":"2018-03-08T01:40:20.000Z","comments":true,"path":"2018/03/07/机器学习-02-安装Python和Anaconda/","link":"","permalink":"http://yoursite.com/2018/03/07/机器学习-02-安装Python和Anaconda/","excerpt":"安装开发环境选择适合自己的Anaconda版本，选择3版本，这个是一个集成开发环境，用来做科学计算非常的方便，不仅包含python,还有常用的标准库 数据预处理 下载数据集 导入标准库 导入数据集 缺失数据 分类数据 将数据分成训练集和测试集 特征缩放 数据预处理模板","text":"安装开发环境选择适合自己的Anaconda版本，选择3版本，这个是一个集成开发环境，用来做科学计算非常的方便，不仅包含python,还有常用的标准库 数据预处理 下载数据集 导入标准库 导入数据集 缺失数据 分类数据 将数据分成训练集和测试集 特征缩放 数据预处理模板","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"},{"name":"tutorial","slug":"机器学习/tutorial","permalink":"http://yoursite.com/categories/机器学习/tutorial/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"机器学习_01_应用及未来","slug":"机器学习-01-现实应用","date":"2018-03-07T11:22:56.000Z","updated":"2018-03-08T01:40:14.000Z","comments":true,"path":"2018/03/07/机器学习-01-现实应用/","link":"","permalink":"http://yoursite.com/2018/03/07/机器学习-01-现实应用/","excerpt":"机器学习机器学习的几大应用 人脸识别 动作捕捉 虚拟现实 语音识别 机器人 广告推送 产品推荐 医疗 航空航天 探索火星 等等","text":"机器学习机器学习的几大应用 人脸识别 动作捕捉 虚拟现实 语音识别 机器人 广告推送 产品推荐 医疗 航空航天 探索火星 等等 未来 从史前到2005年人类共产生了130EB字节的数据 到了2010年变成了1200EB字节的数据 到了2015年变成了7900EB字节的数据 到了2020年40900EB字节的数据 目前全世界的数据成指数型增长态势","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"},{"name":"tutorial","slug":"机器学习/tutorial","permalink":"http://yoursite.com/categories/机器学习/tutorial/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"p-02-变量和类型","slug":"p-02-变量和类型","date":"2018-03-07T07:59:22.000Z","updated":"2018-03-08T01:40:06.000Z","comments":true,"path":"2018/03/07/p-02-变量和类型/","link":"","permalink":"http://yoursite.com/2018/03/07/p-02-变量和类型/","excerpt":"变量和类型python是完全的面向对象的，并不是静态类型。变量在使用前不需要声明，即使是其类型。每一个变量在python中都是一个对象。 Numberspython支持两种数值类型：整形和浮点型（复数类型） 定义变量 123456789101112131415myint = 7print(myint)---output---7myfloat = 7.0print(myfloat)myfloat = float(7)print(myfloat)---output---7.07.0","text":"变量和类型python是完全的面向对象的，并不是静态类型。变量在使用前不需要声明，即使是其类型。每一个变量在python中都是一个对象。 Numberspython支持两种数值类型：整形和浮点型（复数类型） 定义变量 123456789101112131415myint = 7print(myint)---output---7myfloat = 7.0print(myfloat)myfloat = float(7)print(myfloat)---output---7.07.0 字符串字符串的定义可以使用单引号、双引号、三引号,双引号内可以嵌入单引号，三单引号会按原格式输出，三双引号表示注释 1234567891011121314151617181920212223242526272829mystring = &apos;hello&apos;print(mystring)mystring = &quot;hello&quot;print(mystring)mystring = &apos;&apos;&apos;multilinestring&apos;&apos;&apos;print(mystring)one = 1two = 2three = one + twoprint(three)hello = &quot;hello&quot;world = &quot;world&quot;helloworld = hello + &quot; &quot; + worldprint(helloworld)---output---hellohellomultilinestring3hello world 变量可以同时赋值多个 1234a, b = 3, 4print(a,b)---output---3 4 整形和字符串不可以执行加法操作 练习12345678910111213141516mystring = &quot;hello&quot;myfloat = 10.0myint = 20# testing codeif mystring == &quot;hello&quot;: print(&quot;String: %s&quot; % mystring)if isinstance(myfloat, float) and myfloat == 10.0: print(&quot;Float: %f&quot; % myfloat)if isinstance(myint, int) and myint == 20: print(&quot;Integer: %d&quot; % myint)---output---String: helloFloat: 10.000000Integer: 20","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"tutorial","slug":"python/tutorial","permalink":"http://yoursite.com/categories/python/tutorial/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Hello world","slug":"p-01-hello-world","date":"2018-03-07T07:46:04.000Z","updated":"2018-03-08T01:40:51.000Z","comments":true,"path":"2018/03/07/p-01-hello-world/","link":"","permalink":"http://yoursite.com/2018/03/07/p-01-hello-world/","excerpt":"Hello, World!Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/）, 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL(GNU General Public License)协议。Python语法简洁清晰，特色之一是强制用空白符(white space)作为语句缩进。Python具有丰富和强大的库。它常被昵称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。常见的一种应用情形是，使用Python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如3D游戏中的图形渲染模块，性能要求特别高，就可以用C/C++重写，而后封装为Python可以调用的扩展类库。需要注意的是在您使用扩展类库时可能需要考虑平台问题，某些可能不提供跨平台的实现。7月20日，IEEE发布2017年编程语言排行榜：Python高居首位。 print语句用于输出，从3版本之后print变成为一个方法，因此必须使用括号1234print(&quot;This line will be printed.&quot;)---output---This line will be printed.","text":"Hello, World!Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/）, 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL(GNU General Public License)协议。Python语法简洁清晰，特色之一是强制用空白符(white space)作为语句缩进。Python具有丰富和强大的库。它常被昵称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。常见的一种应用情形是，使用Python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如3D游戏中的图形渲染模块，性能要求特别高，就可以用C/C++重写，而后封装为Python可以调用的扩展类库。需要注意的是在您使用扩展类库时可能需要考虑平台问题，某些可能不提供跨平台的实现。7月20日，IEEE发布2017年编程语言排行榜：Python高居首位。 print语句用于输出，从3版本之后print变成为一个方法，因此必须使用括号1234print(&quot;This line will be printed.&quot;)---output---This line will be printed. 缩进python使用缩进表示代码块，代替传统的括号，tabs和普通的空格都可以，但标准的做法是使用四个空格，例如： 1234567x = 1if x == 1: # indented four spaces print(&quot;x is 1.&quot;)---output---x is 1. 练习使用print语句输出Hello，World 1234print(&quot;Goodbye, World!&quot;)---output---Goodbye, World!","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"tutorial","slug":"python/tutorial","permalink":"http://yoursite.com/categories/python/tutorial/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"随机试验与样本空间","slug":"随机试验与样本空间","date":"2018-03-06T08:21:46.000Z","updated":"2018-03-08T01:40:36.000Z","comments":true,"path":"2018/03/06/随机试验与样本空间/","link":"","permalink":"http://yoursite.com/2018/03/06/随机试验与样本空间/","excerpt":"随机试验与样本空间如果一个试验事先能够明确地知道试验所有可能的基本结果，在每一次观察中，不能事先准确地预言其中哪一个基本结果会发生，并且在相同条件下可以重复进行，则称此试验为随机试验。 随机试验的每种基本结果称为一个样本点ω，全体基本结果构成的集合称为样本空间，通常记为Ω。 样本空间中具备某种属性的样本点的集合叫做一个随机事件，简称为事件，通常用大写字母 A、B、C 等表示。由一个样本点组成的单点集，称为基本事件。$ \\{ 1,2,3 \\} $ $$ a ^ 2 + b ^ 2 = c ^ 2 $$$$ \\sqrt{2} $$$$ evidence_{i}=\\sum _{j}W_{ij}x_{j}+b_{i} $$$$ \\{ 1,2,3 \\} $$ $$f(x): \\begin{cases} x, x&gt;0 \\\\ \\\\ -x,x&lt;0 \\end{cases}$$","text":"随机试验与样本空间如果一个试验事先能够明确地知道试验所有可能的基本结果，在每一次观察中，不能事先准确地预言其中哪一个基本结果会发生，并且在相同条件下可以重复进行，则称此试验为随机试验。 随机试验的每种基本结果称为一个样本点ω，全体基本结果构成的集合称为样本空间，通常记为Ω。 样本空间中具备某种属性的样本点的集合叫做一个随机事件，简称为事件，通常用大写字母 A、B、C 等表示。由一个样本点组成的单点集，称为基本事件。$ \\{ 1,2,3 \\} $ $$ a ^ 2 + b ^ 2 = c ^ 2 $$$$ \\sqrt{2} $$$$ evidence_{i}=\\sum _{j}W_{ij}x_{j}+b_{i} $$$$ \\{ 1,2,3 \\} $$ $$f(x): \\begin{cases} x, x&gt;0 \\\\ \\\\ -x,x&lt;0 \\end{cases}$$","categories":[{"name":"数学、概率论","slug":"数学、概率论","permalink":"http://yoursite.com/categories/数学、概率论/"}],"tags":[{"name":"数学、概率论","slug":"数学、概率论","permalink":"http://yoursite.com/tags/数学、概率论/"}]},{"title":"密码学、数字签名","slug":"密码学、数字签名","date":"2018-03-02T00:01:21.000Z","updated":"2018-03-07T02:08:31.000Z","comments":true,"path":"2018/03/02/密码学、数字签名/","link":"","permalink":"http://yoursite.com/2018/03/02/密码学、数字签名/","excerpt":"密码学基础 加密方法可以分为两大类。一类是单钥加密（private key cryptography），还有一类叫做双钥加密（public key cryptography）。前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是两套密码。 在单钥加密的情况下，密钥只有一把，所以密钥的保存变得很重要。一旦密钥泄漏，密码也就被破解。 在双钥加密的情况下，密钥有两把，一把是公开的公钥，还有一把是不公开的私钥。双钥加密的原理如下： a) 公钥和私钥是一一对应的关系，有一把公钥就必然有一把与之对应的、独一无二的私钥，反之亦成立。 b) 所有的（公钥, 私钥）对都是不同的。 c) 用公钥可以解开私钥加密的信息，反之亦成立。 d) 同时生成公钥和私钥应该相对比较容易，但是从公钥推算出私钥，应该是很困难或者是不可能的。 目前，通用的单钥加密算法为DES（Data Encryption Standard），通用的双钥加密算法为RSA（ Rivest-Shamir-Adleman），都产生于上个世纪70年代。 在双钥体系中，公钥用来加密信息，私钥用来数字签名。 因为任何人都可以生成自己的（公钥，私钥）对，所以为了防止有人散布伪造的公钥骗取信任，就需要一个可靠的第三方机构来生成经过认证的（公钥，私钥）对。目前，世界上最主要的数字服务认证商是位于美国加州的Verisign公司，它的主要业务就是分发RSA数字证书。","text":"密码学基础 加密方法可以分为两大类。一类是单钥加密（private key cryptography），还有一类叫做双钥加密（public key cryptography）。前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是两套密码。 在单钥加密的情况下，密钥只有一把，所以密钥的保存变得很重要。一旦密钥泄漏，密码也就被破解。 在双钥加密的情况下，密钥有两把，一把是公开的公钥，还有一把是不公开的私钥。双钥加密的原理如下： a) 公钥和私钥是一一对应的关系，有一把公钥就必然有一把与之对应的、独一无二的私钥，反之亦成立。 b) 所有的（公钥, 私钥）对都是不同的。 c) 用公钥可以解开私钥加密的信息，反之亦成立。 d) 同时生成公钥和私钥应该相对比较容易，但是从公钥推算出私钥，应该是很困难或者是不可能的。 目前，通用的单钥加密算法为DES（Data Encryption Standard），通用的双钥加密算法为RSA（ Rivest-Shamir-Adleman），都产生于上个世纪70年代。 在双钥体系中，公钥用来加密信息，私钥用来数字签名。 因为任何人都可以生成自己的（公钥，私钥）对，所以为了防止有人散布伪造的公钥骗取信任，就需要一个可靠的第三方机构来生成经过认证的（公钥，私钥）对。目前，世界上最主要的数字服务认证商是位于美国加州的Verisign公司，它的主要业务就是分发RSA数字证书。 数字签名原文地址数字签名图解 鲍勃有两把钥匙，一把是公钥，另一把是私钥。 鲍勃把公钥送给他的朋友们—-帕蒂、道格、苏珊—-每人一把。 苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。 鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。 鲍勃给苏珊回信，决定采用”数字签名”。他写完后先用Hash函数，生成信件的摘要（digest）。 然后，鲍勃使用私钥，对这个摘要加密，生成”数字签名”（signature）。 鲍勃将这个签名，附在信件下面，一起发给苏珊。 苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。 苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。 复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。 后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。 鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。 苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。 f(x_1,x_2,\\ldots,x_n) = x_1^2+x_2^2+\\cdots+x_n^2","categories":[],"tags":[{"name":"密码学","slug":"密码学","permalink":"http://yoursite.com/tags/密码学/"}]},{"title":"SSM框架整合","slug":"SSM框架整合","date":"2018-03-01T05:45:35.000Z","updated":"2018-03-01T05:46:39.000Z","comments":true,"path":"2018/03/01/SSM框架整合/","link":"","permalink":"http://yoursite.com/2018/03/01/SSM框架整合/","excerpt":"","text":"","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"},{"name":"maven","slug":"java/maven","permalink":"http://yoursite.com/categories/java/maven/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"基于Maven搭建Java后台项目工程结构","slug":"java项目结构","date":"2018-02-27T05:23:31.000Z","updated":"2018-03-01T05:42:49.000Z","comments":true,"path":"2018/02/27/java项目结构/","link":"","permalink":"http://yoursite.com/2018/02/27/java项目结构/","excerpt":"项目结构Maven的常见打包方式：jar、war、pomPom工程一般都是父工程，管理JAR包的版本，maven插件的版本，统一的依赖管理。聚合工程12345678project-parent: 父工程，打包方式POM，管理Jar包的版本号。项目中所有工程都应继承父工程。 |-- project-common: 通用的工具类通用的pojo。打包方式jar。 |-- project-manager: 服务层工程，聚合工程，Pom工程。 |-- project-manager-dao: jar |-- project-manager-pojo: jar |-- project-manager-interface: jar |-- project-manager-service: war |-- project-manager-web:表现层工程，打包方式war","text":"项目结构Maven的常见打包方式：jar、war、pomPom工程一般都是父工程，管理JAR包的版本，maven插件的版本，统一的依赖管理。聚合工程12345678project-parent: 父工程，打包方式POM，管理Jar包的版本号。项目中所有工程都应继承父工程。 |-- project-common: 通用的工具类通用的pojo。打包方式jar。 |-- project-manager: 服务层工程，聚合工程，Pom工程。 |-- project-manager-dao: jar |-- project-manager-pojo: jar |-- project-manager-interface: jar |-- project-manager-service: war |-- project-manager-web:表现层工程，打包方式war 开发环境搭建使用intellij project-parent搭建新建一个Empty Project命名为tp,之后新增模块tp-parent,修改打包方式为 1234&lt;groupId&gt;com.tp&lt;/groupId&gt;&lt;artifactId&gt;tp-parent&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;pom&lt;/packaging&gt; 接下来集中定义版本号,这里面只负责版本号的管理，并没有实际加载lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;artifactId&gt;tp-parent&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;properties&gt; &lt;junit.version&gt;4.12&lt;/junit.version&gt; &lt;spring.version&gt;4.2.4.RELEASE&lt;/spring.version&gt; &lt;mybatis.version&gt;3.2.8&lt;/mybatis.version&gt; &lt;mybatis.spring.version&gt;1.2.2&lt;/mybatis.spring.version&gt; &lt;mybatis.paginator.version&gt;1.2.15&lt;/mybatis.paginator.version&gt; &lt;mysql.version&gt;5.1.32&lt;/mysql.version&gt; &lt;slf4j.version&gt;1.6.4&lt;/slf4j.version&gt; &lt;jackson.version&gt;2.4.2&lt;/jackson.version&gt; &lt;druid.version&gt;1.0.9&lt;/druid.version&gt; &lt;httpclient.version&gt;4.3.5&lt;/httpclient.version&gt; &lt;jstl.version&gt;1.2&lt;/jstl.version&gt; &lt;servlet-api.version&gt;2.5&lt;/servlet-api.version&gt; &lt;jsp-api.version&gt;2.0&lt;/jsp-api.version&gt; &lt;joda-time.version&gt;2.5&lt;/joda-time.version&gt; &lt;commons-lang3.version&gt;3.3.2&lt;/commons-lang3.version&gt; &lt;commons-io.version&gt;1.3.2&lt;/commons-io.version&gt; &lt;commons-net.version&gt;3.3&lt;/commons-net.version&gt; &lt;pagehelper.version&gt;3.4.2-fix&lt;/pagehelper.version&gt; &lt;jsqlparser.version&gt;0.9.1&lt;/jsqlparser.version&gt; &lt;commons-fileupload.version&gt;1.3.1&lt;/commons-fileupload.version&gt; &lt;jedis.version&gt;2.7.2&lt;/jedis.version&gt; &lt;solrj.version&gt;4.10.3&lt;/solrj.version&gt; &lt;dubbo.version&gt;2.5.3&lt;/dubbo.version&gt; &lt;zookeeper.version&gt;3.4.7&lt;/zookeeper.version&gt; &lt;zkclient.version&gt;0.1&lt;/zkclient.version&gt; &lt;activemq.version&gt;5.11.2&lt;/activemq.version&gt; &lt;freemarker.version&gt;2.3.23&lt;/freemarker.version&gt; &lt;quartz.version&gt;2.2.2&lt;/quartz.version&gt; &lt;/properties&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!-- 时间操作组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;joda-time&lt;/groupId&gt; &lt;artifactId&gt;joda-time&lt;/artifactId&gt; &lt;version&gt;$&#123;joda-time.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Apache工具组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-lang3.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-io.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-net&lt;/groupId&gt; &lt;artifactId&gt;commons-net&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-net.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Jackson Json处理工具包 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- httpclient --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;$&#123;httpclient.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- quartz任务调度框架 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt; &lt;artifactId&gt;quartz&lt;/artifactId&gt; &lt;version&gt;$&#123;quartz.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 单元测试 --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 日志处理 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Mybatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.miemiedev&lt;/groupId&gt; &lt;artifactId&gt;mybatis-paginator&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.paginator.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- MySql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- JSP相关 --&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;$&#123;jstl.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;$&#123;servlet-api.version&#125;&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;$&#123;jsp-api.version&#125;&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 文件上传组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Redis客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;$&#123;jedis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- solr客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.solr&lt;/groupId&gt; &lt;artifactId&gt;solr-solrj&lt;/artifactId&gt; &lt;version&gt;$&#123;solrj.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- dubbo相关 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;$&#123;zookeeper.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;$&#123;zkclient.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt; &lt;artifactId&gt;activemq-all&lt;/artifactId&gt; &lt;version&gt;$&#123;activemq.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.freemarker&lt;/groupId&gt; &lt;artifactId&gt;freemarker&lt;/artifactId&gt; &lt;version&gt;$&#123;freemarker.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;/finalName&gt; &lt;plugins&gt; &lt;!-- 资源文件拷贝插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;2.7&lt;/version&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- java编译插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.2&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.7&lt;/source&gt; &lt;target&gt;1.7&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;!-- 配置Tomcat插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt; project-common搭建新增project-common模块继承tp-parent模块，添加常用依赖jar包 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;tp-parent&lt;/artifactId&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;relativePath&gt;../tp-parent/pom.xml&lt;/relativePath&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;artifactId&gt;tp-common&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- 时间操作组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;joda-time&lt;/groupId&gt; &lt;artifactId&gt;joda-time&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- Apache工具组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-net&lt;/groupId&gt; &lt;artifactId&gt;commons-net&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- Jackson Json处理工具包 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- httpclient --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- quartz任务调度框架 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt; &lt;artifactId&gt;quartz&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 单元测试 --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 日志处理 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; tp-manager搭建新增tp-manager模块继承tp-parent模块，添加常用依赖jar包,添加tomcat插件运行该聚合工程，好处是聚合工程自动管理依赖，不存在依赖安装的问题 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;tp-parent&lt;/artifactId&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;relativePath&gt;../tp-parent/pom.xml&lt;/relativePath&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;tp-manager&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;modules&gt; &lt;module&gt;tp-manager-dao&lt;/module&gt; &lt;module&gt;tp-manager-pojo&lt;/module&gt; &lt;module&gt;tp-manager-interface&lt;/module&gt; &lt;module&gt;tp-manager-service&lt;/module&gt; &lt;/modules&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;artifactId&gt;tp-common&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;path&gt;/&lt;/path&gt; &lt;port&gt;8080&lt;/port&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; tp-manager-pojo搭建新增tp-manager-pojo模块继承tp-manager模块，添加常用依赖jar包1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;tp-manager&lt;/artifactId&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;tp-manager-pojo&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt;&lt;/project&gt; tp-manager-dao搭建新增tp-manager-dao模块继承tp-manager模块，添加常用依赖jar包1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;tp-manager&lt;/artifactId&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;tp-manager-dao&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;artifactId&gt;tp-manager-pojo&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加mybatis的依赖 --&gt; &lt;!-- Mybatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.miemiedev&lt;/groupId&gt; &lt;artifactId&gt;mybatis-paginator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- MySql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;!-- &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; --&gt; &lt;/resources&gt; &lt;/build&gt;&lt;/project&gt; tp-manager-interface搭建新增tp-manager-interface搭建模块继承tp-manager模块，添加常用依赖jar包12345678910111213141516171819202122&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;tp-manager&lt;/artifactId&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;tp-manager-interface&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;artifactId&gt;tp-manager-pojo&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; tp-manager-service搭建新增tp-manager-service搭建模块继承tp-manager模块，添加常用依赖jar包 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;tp-manager&lt;/artifactId&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;tp-manager-service&lt;/artifactId&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;artifactId&gt;tp-manager-dao&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.tp&lt;/groupId&gt; &lt;artifactId&gt;tp-manager-interface&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- dubbo相关的jar包 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring&lt;/artifactId&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;netty&lt;/artifactId&gt; &lt;groupId&gt;org.jboss.netty&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"},{"name":"maven","slug":"java/maven","permalink":"http://yoursite.com/categories/java/maven/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"结构","slug":"结构","permalink":"http://yoursite.com/tags/结构/"}]},{"title":"Mac 安装virtualenv ","slug":"python安装","date":"2018-02-26T13:28:54.000Z","updated":"2018-02-26T13:50:12.000Z","comments":true,"path":"2018/02/26/python安装/","link":"","permalink":"http://yoursite.com/2018/02/26/python安装/","excerpt":"","text":"Mac 安装virtualenv场景很多情况下， 我们需要在同一台机器上， 开发运行多个python进程， 而这些进程有的需要使用python3， 有的需要使用python2， 这就导致我们经常把服务器的环境搞得很混乱在这种情况下， 我们就可以引入virutalenv了 什么是virtualenvvirtualenv 就是为应对以上需要创建属于各个python进程的运行隔离环境而生的，在同一个服务器中， 我们可以使用virutalenv 创建多个python隔离环境， 每个python隔离环境可以独立的运行该环境下的python进程， 并且安装对应环境中的python扩展包。比如， 有两个服务进程， 一个需要使用py2.7， 另一个需要使用py3.5， 而且可能需要安装各自的扩展包。 这时我们就可以使用virtualenv分别创建两个隔离环境， 一个用于运行python2.7， 一个用于运行python3.5即可。 安装virutalenv因为我使用的是mac， 所以一下均在mac上的操作 第一步， 需要安装pip，pip是unix系统下python的包管理工具， 我的安装步骤如下： 12curl -o get-pip.py https://bootstrap.pypa.io/get-pip.pysudo python get-pip.py 即可安装 使用pip安装virtualenv1sudo pip install virtualenv 这样我们就安装好了virtualenv 如何使用比如我想隔离出python2.7的环境、分两步 第一步： 创建隔离环境1virtualenv py2.7 这里py2.7只是一个环境名称， 可以任意起名字、这样， 在运行该条命令的目录下就会有一个py2.7的目录名， 该目录下就是创建的这个python隔离环境所需的所有内容， 包含了对应版本的python命令， pip管理工具等等内容 第二步：激活隔离环境我们创建好环境后， 并未处于该环境中， 所以我们需要激活该环境， 仅需要一条命令1source py2.7/bin/activate source下该环境下bin目录下的activate即可 现在， 你所添加的扩展和运行的环境， 都处于这个隔离环境中了， 如果还需要一个python3.5的环境， 你可以在安装好python3.5（不要在任何隔离环境中）后， 创建隔离环境时，指定python版本即可， 如下： 1virtualenv -p python3.5 py3.5 如何退出隔离环境运行1deactivate 即可","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"基础","slug":"python/基础","permalink":"http://yoursite.com/categories/python/基础/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"安装","slug":"安装","permalink":"http://yoursite.com/tags/安装/"}]},{"title":"python简介","slug":"python简介","date":"2018-02-26T13:24:50.000Z","updated":"2018-02-26T13:31:29.000Z","comments":true,"path":"2018/02/26/python简介/","link":"","permalink":"http://yoursite.com/2018/02/26/python简介/","excerpt":"","text":"","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"基础","slug":"python/基础","permalink":"http://yoursite.com/categories/python/基础/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"简介","slug":"简介","permalink":"http://yoursite.com/tags/简介/"}]},{"title":"选择排序-泛型、性能测试","slug":"选择排序-泛型、性能测试","date":"2018-01-31T02:13:47.000Z","updated":"2018-01-31T02:37:33.000Z","comments":true,"path":"2018/01/31/选择排序-泛型、性能测试/","link":"","permalink":"http://yoursite.com/2018/01/31/选择排序-泛型、性能测试/","excerpt":"创建辅助函数用来自动生成测试数据和性能测试，通过验证选择排序的时间复杂度在O(n^2)，基本是数量的平方级别 数据量 花费时间 200 3ms 2000 14ms 20000 825ms 200000 104383ms","text":"创建辅助函数用来自动生成测试数据和性能测试，通过验证选择排序的时间复杂度在O(n^2)，基本是数量的平方级别 数据量 花费时间 200 3ms 2000 14ms 20000 825ms 200000 104383ms 泛型1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package felix.algo;import felix.util.SortTestHelper;/** * Created by lbb on 2018/1/31. */public class A2_SelectionSortT &#123;// 不允许产生实例 private A2_SelectionSortT() &#123;&#125;// 选择排序算法 public static &lt;T extends Comparable&lt;T&gt;&gt; void sort(T[] arr) &#123;// 1. 选择排序 for(int i=0; i&lt;arr.length; i++) &#123;// 2. 定义最小索引值 int minIndex = i;// 3. 找到最小值 for(int j=i+1; j&lt;arr.length; j++) &#123; if (arr[j].compareTo(arr[minIndex]) &lt; 0) minIndex = j; &#125;// 4. 交换 swap(arr, i, minIndex); &#125; &#125; private static void swap(Object[] arr, int i, int minIndex) &#123; Object temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; &#125; public static void main(String[] args) &#123; int N = 100000; Integer[] arr = SortTestHelper.generateRandomIntegerArray(N,1,100); SortTestHelper.testSort(&quot;felix.algo.A2_SelectionSortT&quot;,arr); &#125;&#125; 辅助函数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package felix.util;import java.lang.reflect.Method;public class SortTestHelper &#123;// SortTestHelper不允许产生任何实例 private SortTestHelper() &#123;&#125;// 生成有n个元素的随机数组，每个元素的随机范围为[rangeL,rangeR] public static Integer[] generateRandomIntegerArray(int n,int rangeL,int rangeR) &#123;// 1. 条件判断 assert rangeL &lt;= rangeL;// 2. 定义返回数组 Integer[] arr = new Integer[n];// 3. 生成数组 for(int i=0; i&lt;n; i++) &#123; arr[i] = new Integer((int)(Math.random()*(rangeR - rangeL + 1) + rangeL)); &#125;// 4. 返回随机数组 return arr; &#125;// 输出arr数组的所有内容 public static void printArr(Object[] arr) &#123; for (int i=0; i&lt;arr.length; i++) &#123; System.out.print(arr[i]); System.out.print(&apos; &apos;); &#125; System.out.println(); &#125; public static boolean isSorted(Comparable[] arr) &#123; for(int i=0; i&lt;arr.length - 1; i++) &#123; if(arr[i].compareTo(arr[i+1]) &gt; 0) return false; &#125; return true; &#125; public static void testSort(String sortClassName, Comparable[] arr) &#123; try&#123; // 通过sortClassName获得排序函数的Class对象 Class sortClass = Class.forName(sortClassName); // 通过排序函数的Class对象获得排序方法 Method sortMethod = sortClass.getMethod(&quot;sort&quot;,new Class[]&#123;Comparable[].class&#125;); // 排序参数只有一个，是可比较数组arr Object[] params = new Object[]&#123;arr&#125;; long startTime = System.currentTimeMillis(); // 调用排序函数 sortMethod.invoke(null,params); long endTime = System.currentTimeMillis(); assert isSorted( arr ); System.out.println( sortClass.getSimpleName()+ &quot; : &quot; + (endTime-startTime) + &quot;ms&quot; ); &#125; catch(Exception e)&#123; e.printStackTrace(); &#125; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"},{"name":"基础","slug":"算法/基础","permalink":"http://yoursite.com/categories/算法/基础/"},{"name":"排序","slug":"算法/基础/排序","permalink":"http://yoursite.com/categories/算法/基础/排序/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"性能测试","slug":"性能测试","permalink":"http://yoursite.com/tags/性能测试/"},{"name":"选择排序","slug":"选择排序","permalink":"http://yoursite.com/tags/选择排序/"}]},{"title":"选择排序","slug":"算法的重要性","date":"2018-01-30T10:56:32.000Z","updated":"2018-01-31T02:17:49.000Z","comments":true,"path":"2018/01/30/算法的重要性/","link":"","permalink":"http://yoursite.com/2018/01/30/算法的重要性/","excerpt":"选择排序 算法无处不在，工作、生活（百度、Google、人工智能、推荐算法）、游戏、性能优化，无处不在 学好算法，才能创造出更多有意义的东西,做一个真正的科学家，而不是仅仅码农。 什么时候开始都不晚，😑！ 线性 树形 图论 选择排序的时间复杂度为O(n^2),排序类的最小复杂度时间为O(nlogn)： 基础 比较基础，容易实现，是一些简单场景的首选； 在一些特殊情况下简单算法更加的有效； 通过简单算法进而衍生出复杂算法是有效的思维方式，作为子过程进行复用； 选择排序：对待排序数据进行遍历，从带遍历中选出一个最小的一个元素，将其放到第一的位置，重复执行，直到最后一个元素为止。","text":"选择排序 算法无处不在，工作、生活（百度、Google、人工智能、推荐算法）、游戏、性能优化，无处不在 学好算法，才能创造出更多有意义的东西,做一个真正的科学家，而不是仅仅码农。 什么时候开始都不晚，😑！ 线性 树形 图论 选择排序的时间复杂度为O(n^2),排序类的最小复杂度时间为O(nlogn)： 基础 比较基础，容易实现，是一些简单场景的首选； 在一些特殊情况下简单算法更加的有效； 通过简单算法进而衍生出复杂算法是有效的思维方式，作为子过程进行复用； 选择排序：对待排序数据进行遍历，从带遍历中选出一个最小的一个元素，将其放到第一的位置，重复执行，直到最后一个元素为止。 12345678910111213141516171819202122232425262728293031public class SelectionSort &#123; public static void sort(int[] arr) &#123; int n = arr.length; for(int i=0; i &lt; n; i++) &#123; int minIndex = i; for(int j= i + 1; j&lt;n ; j++) &#123; if(arr[j]&lt;arr[minIndex]) minIndex = j; &#125; swap(arr,i, minIndex); &#125; &#125; private static void swap(int[] arr,int i,int minIndex) &#123; int t = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = t; &#125; public static void main(String[] args) &#123; int[] arr = &#123;10,9,8,7,6,5,4,3,2,1&#125;; SelectionSort.sort(arr); for( int i = 0 ; i &lt; arr.length ; i ++ )&#123; System.out.print(arr[i]); System.out.print(' '); &#125; System.out.println(); &#125;&#125;输出&gt;1 2 3 4 5 6 7 8 9 10","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"},{"name":"基础","slug":"算法/基础","permalink":"http://yoursite.com/categories/算法/基础/"},{"name":"排序","slug":"算法/基础/排序","permalink":"http://yoursite.com/categories/算法/基础/排序/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"纪念第一篇博客","slug":"纪念第一篇博客","date":"2018-01-28T13:13:58.000Z","updated":"2018-01-30T10:57:13.000Z","comments":true,"path":"2018/01/28/纪念第一篇博客/","link":"","permalink":"http://yoursite.com/2018/01/28/纪念第一篇博客/","excerpt":"","text":"前言 一路走来，经历了很多，充满了矛盾，总是自命不凡却又蹉跎岁月。不过我仍然坚信自己与众不同，也许没有别人聪明，也许没有别人努力，一直以来我觉得自己最有优势的就是能够发现问题的本质。这是我第一篇博客，主要用来记录自己生活、学习、工作的点点滴滴，是对自己的一种反思和检查。希望你越来越好，成为你当初心中的那个自己。 未来的路学习准备开始学习大数据相关的技术，列了一个计划： 明天开始第一天，Fighting！","categories":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/categories/生活/"},{"name":"感悟","slug":"生活/感悟","permalink":"http://yoursite.com/categories/生活/感悟/"}],"tags":[]}]}